name: Build and Publish Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment files
      if: github.event_name != 'pull_request'
      run: |
        mkdir -p deployment
        cat > deployment/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          app:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ports:
              - "8081:80"
            depends_on:
              mysql:
                condition: service_healthy
            environment:
              - APACHE_DOCUMENT_ROOT=/var/www/html/public
              - APP_ENV=production
              - APP_DEBUG=false
            env_file:
              - docker.env
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost/"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          mysql:
            image: mysql:8.0
            environment:
              MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
              MYSQL_DATABASE: ${MYSQL_DATABASE}
              MYSQL_USER: ${MYSQL_USER}
              MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            ports:
              - "3306:3306"
            volumes:
              - mysql_data:/var/lib/mysql
              - ./create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
              timeout: 20s
              retries: 10
        
        volumes:
          mysql_data:
        EOF
        
        cp docker.env.example deployment/
        cp create_tables.sql deployment/
        cp scripts/deploy-production.sh deployment/
        chmod +x deployment/deploy-production.sh

    - name: Upload deployment files
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deployment/ 