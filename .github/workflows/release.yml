name: Create Release

on:
  push:
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create deployment package
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        mkdir -p deployment-package
        
        # Copy necessary files for deployment
        cp docker-compose.yml deployment-package/
        cp docker.env.example deployment-package/docker.env
        cp create_tables.sql deployment-package/
        cp -r scripts deployment-package/
        cp README.md deployment-package/
        cp DOCKER_README.md deployment-package/
        
        # Create deployment script
        cat > deployment-package/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Deploying GitHub Smart v$VERSION"
        
        # Check if docker-compose is available
        if ! command -v docker-compose &> /dev/null; then
            echo "❌ docker-compose is not installed"
            exit 1
        fi
        
        # Check if Docker is running
        if ! docker info &> /dev/null; then
            echo "❌ Docker is not running"
            exit 1
        fi
        
        # Pull the latest image
        echo "📦 Pulling latest image..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Start the application
        echo "🚀 Starting application..."
        docker-compose up -d
        
        echo "✅ Deployment completed successfully!"
        echo "🌐 Application is available at: http://localhost:8081"
        echo "📊 Health check: docker-compose ps"
        EOF
        
        chmod +x deployment-package/deploy.sh
        
        # Create version file
        echo "$VERSION" > deployment-package/VERSION
        
        # Create checksum
        cd deployment-package
        tar -czf ../github-smart-$VERSION.tar.gz .
        cd ..
        sha256sum github-smart-$VERSION.tar.gz > github-smart-$VERSION.sha256

    - name: Upload deployment package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./github-smart-${{ github.ref_name }}.tar.gz
        asset_name: github-smart-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./github-smart-${{ github.ref_name }}.sha256
        asset_name: github-smart-${{ github.ref_name }}.sha256
        asset_content_type: text/plain

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## 🚀 GitHub Smart v${{ github.ref_name }}
          
          ### 📦 What's New
          - Docker image built and published to GitHub Container Registry
          - Multi-platform support (linux/amd64, linux/arm64)
          - Security scanning with Trivy
          - Automated deployment package creation
          
          ### 🐳 Quick Start
          ```bash
          # Download and extract the deployment package
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/github-smart-${{ github.ref_name }}.tar.gz
          tar -xzf github-smart-${{ github.ref_name }}.tar.gz
          cd github-smart-${{ github.ref_name }}
          
          # Configure environment
          cp docker.env.example docker.env
          nano docker.env
          
          # Deploy
          ./deploy.sh
          ```
          
          ### 🔧 Docker Image
          ```bash
          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # Run with docker-compose
          docker-compose up -d
          ```
          
          ### 📋 Requirements
          - Docker 20.10+
          - Docker Compose 2.0+
          - 2GB RAM minimum
          - 5GB free disk space
          
          ### 🔒 Security
          - Vulnerability scanning with Trivy
          - Non-root container user
          - Security headers enabled
          - Health checks implemented
          
          ### 📊 Features
          - GitHub issue management
          - Advanced filtering and analytics
          - Project and bucket organization
          - Real-time dashboard
          - Role-based access control
          
          ### 🔗 Links
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Docker Hub](https://ghcr.io/${{ github.repository }})
          - [Issues](https://github.com/${{ github.repository }}/issues)
        draft: false
        prerelease: false 